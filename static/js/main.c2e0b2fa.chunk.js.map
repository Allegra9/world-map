{"version":3,"sources":["components/PopAgeTable.js","components/PopGrowthMap.js","components/PopGrowthStats.js","components/PopGrowthChart.js","components/PopGrowthData.js","components/Navbar.js","App.js","registerServiceWorker.js","index.js"],"names":["PopAgeTable","state","country","_this","props","data","data2050","getData","year","array","console","log","hundred","group1","group2","group3","group4","map","entry","age","push","total","reducer","accumulator","currentValue","reduce","key","value","color","setState","fetchAgeData","arguments","length","undefined","fetch","concat","then","res","json","getSelectedCountriesData","this","prevProps","styles","table","border","borderRadius","marginTop","marginLeft","marginRight","padding","display","gridTemplateColumns","overflow","pie","margin","h2","textAlign","gridColumnStart","gridColumnEnd","react_default","a","createElement","style","class","react_easy_chart_lib","labels","size","innerHoleSize","Component","PopGrowthMap","_ref","mapData","countryClick","countryClicked","Object","objectWithoutProperties","build","backgroundColor","zoomOnScroll","containerStyle","width","height","onRegionClick","e","countryCode","containerClassName","regionStyle","initial","fill","fill-opacity","stroke","stroke-width","stroke-opacity","hover","cursor","selected","selectedHover","regionsSelectable","series","regions","values","scale","normalizeFunction","components_PopAgeTable","PopGrowthStats","countries","daily","weekly","yearly","in10yrs","reducedDaily","getState","sortedCountries","sortedProps","getWeekly","getYearly","get10Years","obj","objectSpread","growthDaily","objValuesSortedArray","sort","b","sortedCountriesArray","forEach","getKeyByValue","flattened","flattenArray","getUniqArray","object","keys","filter","acc","val","elem","pos","arr","indexOf","entries","_ref2","slicedToArray","_ref3","_ref4","_ref5","_ref6","getAFlag","countryToFind","worldCountries","find","name","common","flag","handleClick","selectCountry","target","id","_this2","gridContainer","countryColumn","background","dataColumn","dataColumn4","ul","listStyle","paddingRight","ulCountries","li","borderBottom","liCountry","topDiv","span","fontWeight","className","Math","floor","onClick","toLocaleString","tenYrs","React","totalPopChartData","totalMalesChartData","totalFemalesChartData","PopGrowthChart","interpolation","polar","selectedOption","loading","fetchDecadesData","getReducedValueForEachYear","totalPop","totalMales","totalFemales","males","females","yearPlusTotalPop","yearPlusTotalMales","yearPlusTotalFemales","makeDataForCharts","sortPopChartData","emptyGlobalVariables","toConsumableArray","x","y","stringified","element","JSON","stringify","stringifiedElement","parse","getSelectedCountriesChartData","Date","getFullYear","getCountries","allCountriesArray","makeSelectObj","selectOptions","label","handleChange","selectedCountry","chart","h4","select","react_select_esm","onChange","options","placeholder","isSearchable","axes","xTicks","yTicks","grid","verticalGrid","interpolate","lineColors","require","countriesNCodes","gql","_templateObject","PopGrowthData","countryDataCodes","countryDataNames","countryClickedOnMap","countryClickOnMap","getName","getCountryNamesArray","countriesArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","getCountryData","fetchPopulationData","getAllData","finalData","countryData","getCountryDataCodesObject","getCountryDataNamesObject","countryCodeGrowthData","getCode","population","ok","catch","error","handleBtnClick","div","components_PopGrowthMap","btn","components_PopGrowthChart","components_PopGrowthStats","Navbar","nav","title","fontSize","position","subtitle","paddingLeft","img","w","src","alt","App","components_Navbar","components_PopGrowthData","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","client","ApolloClient","uri","ReactDOM","render","react_apollo_esm","src_App_0","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c2e0b2fa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { PieChart } from \"react-easy-chart\";\nimport \"../App.css\";\n\nclass PopAgeTable extends Component {\n  state = {\n    country: this.props.country,\n    data: [],\n    data2050: []\n  };\n\n  getData = (year, array) => {\n    console.log(year, array);\n    let group1 = [];\n    let group2 = [];\n    let group3 = [];\n    let group4 = [];\n    let hundred;\n\n    let data = {};\n\n    array.map(entry => {\n      if (entry.age < 15) {\n        group1.push(entry.total);\n      }\n      if (entry.age >= 15 && entry.age < 25) {\n        group2.push(entry.total);\n      }\n      if (entry.age >= 25 && entry.age < 65) {\n        group3.push(entry.total);\n      }\n      if (entry.age > 65) {\n        group4.push(entry.total);\n      }\n      if (entry.age === 100) {\n        hundred = entry.total;\n      }\n    });\n\n    const reducer = (accumulator, currentValue) => accumulator + currentValue;\n\n    console.log(group1.reduce(reducer)); // 15 entries\n    console.log(group2.reduce(reducer)); // 10 entries\n    console.log(group3.reduce(reducer)); // 40 entries\n    console.log(group4.reduce(reducer)); // 35 entries\n    console.log(hundred); // number\n\n    data = [\n      { key: \"0-14\", value: group1.reduce(reducer), color: \"pink\" },\n      { key: \"15-24\", value: group2.reduce(reducer), color: \"pink\" },\n      { key: \"25-64\", value: group3.reduce(reducer), color: \"blue\" },\n      { key: \"65+\", value: group4.reduce(reducer), color: \"navy\" }\n    ];\n    //console.log(data)\n\n    if (year === 2018) {\n      this.setState(\n        {\n          data: data\n        },\n        () => console.log(this.state.data)\n      );\n    } else {\n      this.setState(\n        {\n          data2050: data\n        },\n        () => console.log(this.state.data2050)\n      );\n    }\n  };\n\n  fetchAgeData = (year = \"2018\", country = \"Lithuania\") => {\n    return fetch(`http://54.72.28.201/1.0/population/${year}/${country}/`)\n      .then(res => res.json())\n      .then(data => this.getData(year, data));\n    //.catch(error => console.log(error))\n    // .then(() => this.setState({loading: false}))\n  };\n\n  getSelectedCountriesData = country => {\n    console.log(\"getSelectedCountriesData:\", country);\n    this.fetchAgeData(2018, country);\n    this.fetchAgeData(2050, country);\n  };\n\n  componentDidMount() {\n    console.log(\"Country I'm fetching for: \", this.props.country);\n    this.getSelectedCountriesData(this.props.country);\n  }\n\n  componentDidUpdate(prevProps) {\n    // compares before updating\n    if (prevProps.country !== this.props.country) {\n      console.log(\"Country I'm fetching for: \", this.props.country);\n      this.getSelectedCountriesData(this.props.country);\n    }\n  }\n\n  render() {\n    const styles = {\n      // style={styles.container}\n      table: {\n        border: \"1px #000 solid\",\n        borderRadius: \"10px\",\n        marginTop: \"100px\",\n        marginLeft: \"5%\",\n        marginRight: \"5%\",\n        padding: \"50px\",\n        display: \"grid\",\n        gridTemplateColumns: \"auto auto\",\n        overflow: \"auto\"\n      },\n      pie: {\n        display: \"inline-block\",\n        margin: \"0 auto\"\n      },\n      h2: {\n        textAlign: \"center\",\n        gridColumnStart: \"1\",\n        gridColumnEnd: \"3\"\n      }\n    };\n\n    return (\n      <div style={styles.table}>\n        <h2 style={styles.h2}>{this.props.country} Age Dependency charts</h2>\n        <div style={styles.pie} class=\"pie\">\n          <h4>2018 (estimated):</h4>\n          <PieChart\n            labels\n            size={300}\n            innerHoleSize={100}\n            data={this.state.data}\n          />\n        </div>\n\n        <div style={styles.pie} class=\"pie\">\n          <h4>2050 (projected):</h4>\n          <PieChart\n            labels\n            size={301}\n            innerHoleSize={100}\n            data={this.state.data2050}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PopAgeTable;\n\n// {\n//   \"females\": 1457841,\n//   \"country\": \"Brazil\",\n//   \"age\": 0,\n//   \"males\": 1523360,\n//   \"year\": 2018,\n//   \"total\": 2981206\n// },\n","import React from \"react\";\n// react plugin for creating vector maps\nimport { VectorMap } from \"react-jvectormap\"; // npm i react-jvectormap\nimport PopAgeTable from \"./PopAgeTable\";\n\nconst PopGrowthMap = ({ mapData, countryClick, countryClicked, ...props }) => {\n  const handleClick = (e, countryCode) => {\n    console.log(countryCode);\n    countryClick(countryCode);\n  };\n\n  const styles = {\n    noData: {\n      textAlign: \"center\"\n    }\n  };\n\n  return (\n    <div>\n      <VectorMap\n        map={\"world_mill\"}\n        backgroundColor=\"transparent\"\n        zoomOnScroll={false}\n        containerStyle={{\n          width: \"100%\",\n          height: \"520px\"\n        }}\n        onRegionClick={handleClick}\n        containerClassName=\"map\"\n        regionStyle={{\n          initial: {\n            fill: \"#e4e4e4\",\n            \"fill-opacity\": 0.9,\n            stroke: \"none\",\n            \"stroke-width\": 0,\n            \"stroke-opacity\": 0\n          },\n          hover: {\n            \"fill-opacity\": 0.8,\n            cursor: \"pointer\"\n          },\n          selected: {\n            fill: \"#2938bc\"\n          },\n          selectedHover: {}\n        }}\n        regionsSelectable={true}\n        series={{\n          regions: [\n            {\n              values: mapData,\n              scale: [\"#146804\", \"#ff0000\"],\n              normalizeFunction: \"polynomial\"\n            }\n          ]\n        }}\n      />\n      {countryClicked.length > 0 ? (\n        countryClicked !== \"Greenland\" &&\n        countryClicked !== \"Venezuela, Bolivarian Republic of\" &&\n        countryClicked !== \"Bolivia, Plurinational State of\" &&\n        countryClicked !== \"Iran, Islamic Republic of\" &&\n        countryClicked !== \"Egypt\" &&\n        countryClicked !== \"Tanzania, United Republic of\" &&\n        countryClicked !== \"Yemen\" &&\n        countryClicked !== \"Syrian Arab Republic\" &&\n        countryClicked !== \"Congo, the Democratic Republic of the\" &&\n        countryClicked !== \"Côte d'Ivoire\" &&\n        countryClicked !== \"Korea, Republic of\" &&\n        countryClicked !== \"Korea, Democratic People's Republic of\" &&\n        countryClicked !== \"Viet Nam\" &&\n        countryClicked !== \"Lao People's Democratic Republic\" &&\n        countryClicked !== \"Moldova, Republic of\" &&\n        countryClicked !== \"Macedonia, the Former Yugoslav Republic of\" &&\n        countryClicked !== \"Netherlands\" &&\n        countryClicked !== \"Taiwan, Province of China\" &&\n        countryClicked !== \"Slovakia\" &&\n        countryClicked !== \"Kosovo\" ? (\n          <PopAgeTable country={countryClicked} />\n        ) : (\n          <h2 style={styles.noData}>No data for {countryClicked}</h2>\n        )\n      ) : null}\n    </div>\n  );\n};\n\nexport default PopGrowthMap;\n\n//import worldCountries from 'world-countries' //npm i world-countries\n//let worldCountries = require(\"world-countries\")  //npm i world-countries\n//import countries from 'country-list'  // npm i country-list\n\n//import UserForm from './UserForm'\n\n// const countries = require('country-list')();\n//\n// console.log(countries.getName('IS'));  // Iceland\n// console.log(countries.getCode('Norway')); // IS\n// //console.log(countries.getData())\n// const countriesNCodes = countries.getData()\n// console.log(countriesNCodes)\n\n// console.log(worldCountries)  //capital too\n// console.log(worldCountries.length)  //250\n//\n// let countriesCCa2 = worldCountries.map(country => country.cca2)\n// console.log(countriesCCa2)\n//\n// let countriesNames = worldCountries.map(country => country.name.common)\n// console.log(countriesNames)\n//\n// let countriesFlags = worldCountries.map(country => country.flag)\n// console.log(countriesFlags)\n\n//ES6:\n// Object.keys(myObj).forEach(key => {\n//     console.log(key);          // the name of the current key.\n//     console.log(myObj[key]);   // the value of the current key.\n// });\n\n//ES7:\n// Object.entries(myObj).forEach(([key, val]) => {\n//     console.log(key);          // the name of the current key.\n//     console.log(val);          // the value of the current key.\n// });\n","import React from \"react\";\nimport worldCountries from \"world-countries\";\n\nclass PopGrowthStats extends React.Component {\n  state = {\n    countries: [],\n    daily: [],\n    weekly: [],\n    yearly: [],\n    in10yrs: [],\n    reducedDaily: null\n  };\n\n  getState = () => {\n    this.setState({\n      countries: this.sortedCountries(),\n      daily: this.sortedProps(),\n      weekly: this.getWeekly(),\n      yearly: this.getYearly(),\n      in10yrs: this.get10Years(),\n      reducedDaily: this.reducedDaily()\n    });\n  };\n\n  reducedDaily = () => {\n    let daily = this.sortedProps();\n    const reducer = (accumulator, currentValue) => accumulator + currentValue;\n    return daily.reduce(reducer);\n  };\n\n  sortedCountries = () => {\n    let obj = { ...this.props.growthDaily };\n    let objValuesSortedArray = Object.values(obj).sort((a, b) => b - a);\n    console.log(objValuesSortedArray); // typeof: object,  but it's an array with number values !!!\n    //  obj is    [42559, 13967, 13621, 10710, ...]\n    //for each of this value I need to get the key country\n    let sortedCountriesArray = [];\n    objValuesSortedArray.forEach(value => {\n      sortedCountriesArray.push(this.getKeyByValue(obj, value));\n    });\n    // Kuwait, Botswana, Djibouti, Albania, Luxembourg, Maldives, Fiji, Guyana,\n    // Georgia, French Polynesia, Guadeloupe, Samoa, Antigua and Barbuda,\n    // Aruba, Martinique, Croatia     // 169 ans 147    22  wrong/duplicates\n    console.log(sortedCountriesArray.length); // 169\n    //console.log(sortedCountriesArray)  // array of arrays\n\n    //let flattened = sortedCountriesArray.reduce((acc, val) => acc.concat(val), []) // 227\n    let flattened = this.flattenArray(sortedCountriesArray);\n\n    console.log(this.getUniqArray(flattened));\n    return this.getUniqArray(flattened);\n  };\n\n  getKeyByValue = (object, value) => {\n    //find will give multiple and too little, filter all but bit too many\n    //hence I need to flatten and get unique values after\n    return Object.keys(object).filter(key => object[key] === value);\n  };\n\n  flattenArray = array => {\n    return array.reduce((acc, val) => acc.concat(val), []);\n  };\n\n  getUniqArray = array => {\n    return array.filter((elem, pos, arr) => {\n      return arr.indexOf(elem) === pos;\n    });\n  };\n\n  sortedProps = () => {\n    //sorts the prop values in descending order\n    let obj = { ...this.props.growthDaily };\n    let sortedObj = {};\n    sortedObj = Object.values(obj).sort((a, b) => b - a);\n    return sortedObj;\n  };\n\n  getWeekly = () => {\n    let obj = this.sortedProps();\n    Object.entries(obj).forEach(([key, val]) => {\n      obj[key] = val * 7;\n    });\n    return obj;\n  };\n\n  getYearly = () => {\n    //let obj = {...this.props.growthDaily}  // copies the object, same as Object.assign\n    let obj = this.sortedProps();\n    Object.entries(obj).forEach(([key, val]) => {\n      obj[key] = val * 365;\n    });\n    return obj;\n  };\n\n  get10Years = () => {\n    let obj = this.sortedProps();\n    Object.entries(obj).forEach(([key, val]) => {\n      obj[key] = val * 3650;\n    });\n    return obj;\n  };\n\n  getAFlag = countryToFind => {\n    if (countryToFind === \"Congo\") {\n      let countriesNames = worldCountries.find(\n        country => country.name.common === \"DR Congo\"\n      );\n      return countriesNames.flag;\n    } else if (countryToFind === \"Czech Republic\") {\n      let countriesNames = worldCountries.find(\n        country => country.name.common === \"Czechia\"\n      );\n      return countriesNames.flag;\n    } else if (countryToFind === \"Brunei Darussalam\") {\n      let countriesNames = worldCountries.find(\n        country => country.name.common === \"Brunei\"\n      );\n      return countriesNames.flag;\n    } else if (countryToFind === \"Sao Tome and Principe\") {\n      let countriesNames = worldCountries.find(\n        country => country.name.common === \"São Tomé and Príncipe\"\n      );\n      return countriesNames.flag;\n    } else if (countryToFind === \"Russian Federation\") {\n      let countriesNames = worldCountries.find(\n        country => country.name.common === \"Russia\"\n      );\n      return countriesNames.flag;\n    } else {\n      let countriesNames = worldCountries.find(\n        country => country.name.common === countryToFind\n      );\n      //console.log(countriesNames.flag)\n      return countriesNames.flag;\n    }\n  };\n\n  componentDidMount() {\n    this.getState();\n  }\n\n  handleClick = e => {\n    this.props.selectCountry(e.target.id);\n    console.log(e.target.id);\n  };\n\n  render() {\n    const countries = Object.values(this.state.countries);\n    const daily = Object.values(this.state.daily);\n    const weekly = Object.values(this.state.weekly);\n    const yearly = Object.values(this.state.yearly);\n    const in10yrs = Object.values(this.state.in10yrs);\n\n    //console.log(this.props.growthDaily)\n    //console.log(\"Countries:\", this.state.countries)\n    // console.log(this.state.daily)\n    // console.log(this.state.weekly)\n    // console.log(this.state.yearly)\n    // console.log(this.state.in10yrs)\n\n    //console.log(this.state.reducedDaily)   // 192011     * 7, * 365, * 3650\n\n    const styles = {\n      // style={styles.container}\n      gridContainer: {\n        display: \"grid\",\n        gridTemplateColumns: \"auto auto auto auto auto\",\n        width: \"60%\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\"\n      },\n      countryColumn: {\n        width: \"300px\",\n        border: \"1px #000 solid\",\n        margin: \"50px 0\",\n        borderRadius: \"10px 0 0 10px\",\n        //background: \"rgb(34,195,45)\",\n        background:\n          \"linear-gradient(0deg, rgba(34,195,45,1) 13%, rgba(253,45,45,1) 100%)\"\n      },\n      dataColumn: {\n        width: \"150px\",\n        border: \"1px #000 solid\",\n        margin: \"50px 0\",\n        //background: \"rgb(34,195,45)\",\n        background:\n          \"linear-gradient(0deg, rgba(34,195,45,1) 13%, rgba(253,45,45,1) 100%)\"\n      },\n      dataColumn4: {\n        width: \"150px\",\n        border: \"1px #000 solid\",\n        margin: \"50px 0\",\n        borderRadius: \"0 10px 10px 0\",\n        //background: \"rgb(34,195,45)\",\n        background:\n          \"linear-gradient(0deg, rgba(34,195,45,1) 13%, rgba(253,45,45,1) 100%)\"\n      },\n      ul: {\n        listStyle: \"none\",\n        textAlign: \"right\",\n        paddingRight: \"20px\"\n      },\n      ulCountries: {\n        listStyle: \"none\"\n      },\n      li: {\n        borderBottom: \"1px #000 solid\",\n        padding: \"4px\"\n      },\n      liCountry: {\n        borderBottom: \"1px #000 solid\",\n        cursor: \"pointer\"\n      },\n      topDiv: {\n        padding: \"15px\",\n        width: \"65%\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        marginTop: \"50px\",\n        textAlign: \"center\",\n        borderBottom: \"1px #000 solid\"\n      },\n      span: {\n        padding: \"15px\",\n        marginLeft: \"8px\",\n        fontWeight: \"900\",\n        color: \"red\"\n      }\n    };\n\n    return (\n      <div>\n        <div style={styles.topDiv}>\n          <p className=\"subtitle\">\n            Current world's population growth is\n            <span style={styles.span}>{this.state.reducedDaily}</span> people\n            per day,\n            <span style={styles.span}>\n              {Math.floor(this.state.reducedDaily * 7)}\n            </span>{\" \"}\n            per week,\n            <span style={styles.span}>\n              {Math.floor(this.state.reducedDaily * 360)}\n            </span>{\" \"}\n            per year.\n          </p>\n        </div>\n\n        <div style={styles.gridContainer}>\n          <span style={styles.countryColumn}>\n            <ul style={styles.ulCountries}>\n              <li>\n                <h3 className=\"subtitle\">Country</h3>\n              </li>\n              {countries.map(country => (\n                <li\n                  style={styles.liCountry}\n                  id={country}\n                  onClick={this.handleClick}\n                  className=\"subtitle-link\"\n                >\n                  {this.getAFlag(country)} {country}\n                </li>\n              ))}\n            </ul>\n          </span>\n\n          <span style={styles.dataColumn}>\n            <ul style={styles.ul}>\n              <li>\n                <h3 className=\"subtitle\">Daily</h3>\n              </li>\n              {daily.map(daily => (\n                <li style={styles.li}>{daily.toLocaleString()}</li>\n              ))}\n            </ul>\n          </span>\n\n          <span style={styles.dataColumn}>\n            <ul style={styles.ul}>\n              <li>\n                <h3 className=\"subtitle\">Weekly</h3>\n              </li>\n              {weekly.map(weekly => (\n                <li style={styles.li}>{weekly.toLocaleString()}</li>\n              ))}\n            </ul>\n          </span>\n\n          <span style={styles.dataColumn}>\n            <ul style={styles.ul}>\n              <li>\n                <h3 className=\"subtitle\">Yearly</h3>\n              </li>\n              {yearly.map(yearly => (\n                <li style={styles.li}>{yearly.toLocaleString()}</li>\n              ))}\n            </ul>\n          </span>\n\n          <span style={styles.dataColumn4}>\n            <ul style={styles.ul}>\n              <li>\n                <h3 className=\"subtitle\">10 years</h3>\n              </li>\n              {in10yrs.map(tenYrs => (\n                <li style={styles.li}>{tenYrs.toLocaleString()}</li>\n              ))}\n            </ul>\n          </span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PopGrowthStats;\n","import React, { Component } from \"react\";\nimport { LineChart } from \"react-easy-chart\";\n// npm i react-easy-charts --save\nimport Select from \"react-select\";\n\nlet totalPopChartData = [];\nlet totalMalesChartData = [];\nlet totalFemalesChartData = [];\n\nclass PopGrowthChart extends Component {\n  state = {\n    interpolation: \"linear\",\n    polar: false,\n    totalPopChartData: [],\n    totalMalesChartData: [],\n    totalFemalesChartData: [],\n    selectedOption: \"\",\n    loading: true\n  };\n\n  // `http://api.population.io:80/1.0/population/1980/Brazil/`\n\n  fetchDecadesData = (year = \"2018\", country = \"Lithuania\") => {\n    return fetch(\n      \"http://54.72.28.201:80/1.0/population/\" + `${year}/${country}/`\n    )\n      .then(res => res.json())\n      .then(res => this.getReducedValueForEachYear(year, res))\n      .then(() => this.setState({ loading: false }));\n  };\n\n  getReducedValueForEachYear = (year, array) => {\n    //console.log(year, array)\n    let totalPop = []; // an array of 101 values\n    let totalMales = [];\n    let totalFemales = [];\n\n    //get the array, got each entry get the total, then reduce it to a single value for the given year\n\n    array.map(entry => {\n      totalPop.push(entry.total / 1000000);\n      totalMales.push(entry.males / 1000000);\n      totalFemales.push(entry.females / 1000000);\n    });\n\n    let yearPlusTotalPop = {}; // {2018: 2817402}\n    let yearPlusTotalMales = {};\n    let yearPlusTotalFemales = {};\n\n    const reducer = (accumulator, currentValue) => accumulator + currentValue;\n    //gets the total pop for the given year for the given country\n    yearPlusTotalPop[year] = totalPop.reduce(reducer); // {2018: 2817402}\n    yearPlusTotalMales[year] = totalMales.reduce(reducer); // {2018: 1295220}\n    yearPlusTotalFemales[year] = totalFemales.reduce(reducer); // {2018: 1522182}\n\n    totalPopChartData.push(yearPlusTotalPop); //push to a global variable\n    totalMalesChartData.push(yearPlusTotalMales);\n    totalFemalesChartData.push(yearPlusTotalFemales);\n\n    //console.log(totalPopChartData)\n    // console.log(this.sortPopChartData(totalPopChartData))\n    // console.log(this.sortPopChartData(totalMalesChartData))\n    // console.log(this.sortPopChartData(totalFemalesChartData))\n\n    if (\n      totalPopChartData.length === 7 &&\n      totalMalesChartData.length === 7 &&\n      totalFemalesChartData.length === 7\n    ) {\n      this.setState(\n        {\n          totalPopChartData: this.makeDataForCharts(\n            this.sortPopChartData(totalPopChartData)\n          ),\n          totalMalesChartData: this.makeDataForCharts(\n            this.sortPopChartData(totalMalesChartData)\n          ),\n          totalFemalesChartData: this.makeDataForCharts(\n            this.sortPopChartData(totalFemalesChartData)\n          )\n        },\n        () => this.emptyGlobalVariables()\n      ); // callback !!!!\n    }\n  };\n\n  emptyGlobalVariables = () => {\n    totalPopChartData = [];\n    totalMalesChartData = [];\n    totalFemalesChartData = [];\n  };\n\n  makeDataForCharts = array => {\n    //console.log(array)\n    let data = [];\n    array.forEach(entry =>\n      Object.entries(entry).forEach(([key, val]) => {\n        data = [...data, { x: key, y: val }]; // {1990: 23456434}\n      })\n    );\n    //console.log(data)\n    return data;\n  };\n  // [{1990: 23456434}, {1960: 23456434}, ...]\n\n  //SORTS AN ARRAY OF OBJS BY KEY:\n  sortPopChartData = array => {\n    let stringified = array.map(element => {\n      return JSON.stringify(element);\n    });\n    //console.log(stringified)\n    stringified.sort();\n    return stringified.map(stringifiedElement => {\n      return JSON.parse(stringifiedElement);\n    });\n  };\n\n  getSelectedCountriesChartData = country => {\n    let decades = [\n      1960,\n      1970,\n      1980,\n      1990,\n      2000,\n      2010,\n      new Date().getFullYear()\n    ];\n    decades.forEach(year => this.fetchDecadesData(year, country));\n  };\n\n  componentDidMount() {\n    this.getSelectedCountriesChartData(this.props.selectedCountry);\n  }\n\n  getCountries = () => {\n    // gets countries array\n    //console.log(this.props.growthDaily)\n    let obj = { ...this.props.growthDaily };\n    let allCountriesArray = [];\n    Object.entries(obj).forEach(([key, val]) => {\n      //console.log(key)\n      allCountriesArray.push(key);\n    });\n    //console.log(allCountriesArray)   // all countries array\n    return this.makeSelectObj(allCountriesArray);\n  };\n\n  makeSelectObj = array => {\n    // makes an array of options for the select\n    //console.log(array)\n    let selectOptions = [];\n    array.forEach(entry => {\n      let obj = { value: entry, label: entry }; // {value: \"Zimbabwe\", label: \"Zimbabwe\"}\n      selectOptions = [...selectOptions, obj];\n    });\n    return selectOptions;\n  };\n\n  handleChange = selectedOption => {\n    this.props.selectCountry(Object.values(selectedOption)[0]);\n    this.setState(\n      {\n        loading: true\n      },\n      () => this.getSelectedCountriesChartData(Object.values(selectedOption)[0])\n    );\n    //console.log(Object.values(selectedOption)[0])\n    // this.setState({\n    //   selectedOption: Object.values(selectedOption)[0]\n    // }, () => console.log(`Option selected:`, this.state.selectedOption)  )\n    // console.log(`Option selected:`, selectedOption)\n  };\n\n  render() {\n    const styles = {\n      // style={styles.container}\n      table: {\n        border: \"1px #000 solid\",\n        borderRadius: \"10px\",\n        padding: \"5%\",\n        marginLeft: \"5%\",\n        marginRight: \"5%\",\n        display: \"grid\",\n        gridTemplateColumns: \"auto auto\",\n        paddingRight: \"5%\"\n      },\n      chart: {\n        display: \"inline-block\",\n        margin: \"0 auto\"\n      },\n      h2: {\n        textAlign: \"center\",\n        gridColumnStart: \"1\",\n        gridColumnEnd: \"3\"\n      },\n      h4: {\n        textAlign: \"center\"\n      },\n      select: {\n        gridColumnStart: \"1\",\n        gridColumnEnd: \"3\",\n        width: \"50%\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\"\n      }\n    };\n\n    //  isMulti={true}\n\n    return (\n      <div>\n        {this.props.selectedCountry && !this.state.loading ? (\n          <div style={styles.table}>\n            <div style={styles.select}>\n              <Select\n                value={this.state.selectedOption}\n                onChange={this.handleChange}\n                options={this.getCountries()}\n                placeholder=\"Select a country...\"\n                isSearchable={true}\n              />\n            </div>\n\n            <h2 style={styles.h2}>Charts for {this.props.selectedCountry}:</h2>\n\n            <div style={styles.chart} className=\"chart\">\n              <h4 style={styles.h4}>Total population (millions):</h4>\n              <LineChart\n                axes\n                xTicks={6}\n                yTicks={10}\n                grid\n                verticalGrid\n                interpolate={\"cardinal\"}\n                lineColors={[\"red\"]}\n                width={580}\n                height={350}\n                data={[this.state.totalPopChartData]}\n              />\n            </div>\n\n            <div style={styles.chart} className=\"chart\">\n              <h4 style={styles.h4}>Females and males (millions):</h4>\n              <LineChart\n                style={styles.chart}\n                axes\n                xTicks={6}\n                yTicks={10}\n                grid\n                verticalGrid\n                interpolate={\"cardinal\"}\n                lineColors={[\"blue\", \"red\"]}\n                width={580}\n                height={350}\n                data={[\n                  this.state.totalMalesChartData,\n                  this.state.totalFemalesChartData\n                ]}\n              />\n            </div>\n          </div> //select\n        ) : (\n          <div className=\"spinner-wrapper\">\n            <div className=\"spinner\">\n              <span className=\"fragment\" />\n              <span className=\"fragment\" />\n              <span className=\"fragment\" />\n              loading\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default PopGrowthChart;\n","import React, { Component } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport PopGrowthMap from \"./PopGrowthMap\";\nimport PopGrowthStats from \"./PopGrowthStats\";\nimport PopGrowthChart from \"./PopGrowthChart\";\nimport \"../App.css\";\n\nconst countries = require(\"country-list\");\n\nconst PopGrowthPerDay = gql`\n  {\n    popGrowthPerDay(country: $country)\n  }\n`;\n\n// console.log(countries.getName('IS'));  // Iceland\n// console.log(countries.getCode('Norway')); // IS\n//console.log(countries.getData())\nconst countriesNCodes = countries.getData(); // countriesNCodes\nconsole.log(countriesNCodes); // [0].name   [0].code\n\nclass PopGrowthData extends Component {\n  state = {\n    countryDataCodes: {}, // {AF: 2069, AL: 22, ...}\n    countryDataNames: {}, // {Algeria: 1790, ...}\n    selectedCountry: \"\",\n    countryClickedOnMap: \"\"\n  };\n  //   {Canada: { total_population: [{...},{...}] } }\n\n  countryClickOnMap = countryCode => {\n    if (countryCode !== \"XK\") {\n      let country = countries.getName(countryCode);\n      this.setState(\n        {\n          countryClickedOnMap: country\n        },\n        () => console.log(this.state.countryClickedOnMap)\n      );\n    } else {\n      this.setState(\n        {\n          countryClickedOnMap: \"Kosovo\"\n        },\n        () => console.log(this.state.countryClickedOnMap)\n      );\n    }\n  };\n\n  selectCountry = country => {\n    this.setState(\n      {\n        selectedCountry: country\n      },\n      () => console.log(this.state.selectedCountry)\n    ); // set\n  };\n\n  //get all countries:\n  getCountryNamesArray = () => {\n    const countriesArray = [];\n    console.log(countriesNCodes);\n    for (let country of countriesNCodes) {\n      countriesArray.push(country.name);\n    }\n    return countriesArray;\n  };\n\n  //fetch for each country:\n  getCountryData = name => {\n    return this.fetchPopulationData(name);\n  };\n\n  //get data for each country and set the state:\n  getAllData = countriesArray => {\n    let length = countriesArray.length; //how many countries to fetch for\n    let finalData = [];\n    countriesArray.forEach(country => {\n      this.getCountryData(country) //fetch\n        .then(countryData => {\n          finalData.push(countryData);\n          length--; //decrease\n          if (length === 0) {\n            //only set state when fetched for all the countries\n            if (finalData) {\n              console.log(finalData);\n              finalData = finalData.filter(obj =>\n                obj !== undefined || obj !== null\n                  ? Object.keys(obj).length !== 0\n                  : console.log(obj)\n              ); //get rid of empty objs\n              //return this.getCountryDataCodesObject(finalData)\n              this.setState({\n                countryDataCodes: this.getCountryDataCodesObject(finalData),\n                countryDataNames: this.getCountryDataNamesObject(finalData)\n              });\n            }\n          }\n        });\n    });\n  };\n\n  componentDidMount() {\n    this.getAllData(this.getCountryNamesArray());\n  }\n\n  //reformating the data for the state, to be passed as props:  {code: data}\n  getCountryDataCodesObject = finalData => {\n    //console.log(finalData)\n    let countryCodeGrowthData = {};\n    finalData = finalData.map(entry =>\n      Object.entries(entry).forEach(([key, val]) => {\n        // country: population_data arr w 2 objs\n        //console.log(key);    //168 or 169\n        //key = countries.getCode(key)\n        //val = val['total_population'][1].population - val['total_population'][0].population\n        countryCodeGrowthData[countries.getCode(key)] =\n          val[\"total_population\"][1].population -\n          val[\"total_population\"][0].population +\n          1000; //so no negative values for the map\n        //entry[key] = val\n      })\n    );\n    return countryCodeGrowthData;\n  };\n\n  //reformating the data for the state, to be passed as props:   countryName: data\n  getCountryDataNamesObject = finalData => {\n    //console.log(finalData)\n    let countryCodeGrowthData = {};\n    finalData = finalData.map(entry =>\n      Object.entries(entry).forEach(([key, val]) => {\n        countryCodeGrowthData[key] =\n          val[\"total_population\"][1].population -\n          val[\"total_population\"][0].population;\n        //entry[key] = val\n      })\n    );\n    return countryCodeGrowthData;\n  };\n\n  // http://54.72.28.201:80/1.0/countries\n  // http://api.population.io:80/1.0/population/\n  fetchPopulationData = (country = \"Lithuania\") => {\n    return fetch(\n      \"http://54.72.28.201:80/1.0/population/\" +\n        `${country}/today-and-tomorrow/`\n    )\n      .then(res => {\n        if (res.ok) {\n          // res.status code\n          return res.json();\n        } else {\n          return \"no-country-data\";\n        }\n      })\n      .then(data => {\n        let countryData = {};\n        if (data !== \"no-country-data\") {\n          countryData[country] = data;\n        }\n        return countryData;\n      })\n      .catch(error => {\n        //console.log(error)\n      });\n  };\n\n  handleBtnClick = () => {\n    this.setState(\n      {\n        selectedCountry: \"\"\n      },\n      () => console.log(this.state.selectedCountry)\n    );\n  };\n\n  render() {\n    const styles = {\n      div: {\n        marginTop: \"100px\"\n      }\n    };\n\n    return (\n      <div>\n        {Object.keys(this.state.countryDataCodes).length > 0 ? (\n          <div>\n            <PopGrowthMap\n              mapData={this.state.countryDataCodes}\n              countryClick={this.countryClickOnMap}\n              countryClicked={this.state.countryClickedOnMap}\n            />\n\n            {this.state.selectedCountry !== \"\" ? (\n              <div style={styles.div}>\n                <button\n                  onClick={this.handleBtnClick}\n                  style={styles.btn}\n                  className=\"btn\"\n                >\n                  Back to stats\n                </button>\n                <PopGrowthChart\n                  selectedCountry={this.state.selectedCountry}\n                  growthDaily={this.state.countryDataNames}\n                  selectCountry={this.selectCountry}\n                />\n              </div>\n            ) : (\n              <div>\n                <PopGrowthStats\n                  growthDaily={this.state.countryDataNames}\n                  selectCountry={this.selectCountry}\n                />\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"spinner-wrapper\">\n            <div className=\"spinner\">\n              <span className=\"fragment\" />\n              <span className=\"fragment\" />\n              <span className=\"fragment\" />\n              loading\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n} //class\n\nexport default PopGrowthData;\n\n// <div style={styles.select}>\n//   Search country's charts:\n//   <Select\n//     value={this.state.selectedCountry}\n//     onChange={this.handleChange}\n//     options={options}\n//   />\n// </div>\n\n//   <button onClick={this.handleBtnClick}>See charts for an individual country</button>\n\n//   <PopGrowthChart data={this.state.countryDataNames}/>\n\n// this.state.countryDataCodes.map(entry =>\n//   Object.entries(entry).forEach(([key, val]) => {  // country: population_data arr w 2 objs\n//     console.log(key);    //168 of null   array\n//     console.log(val['total_population'][1].population -\n//     val['total_population'][0].population );\n//   })\n// )\n\n//   this.setState({\n//     populationGrowth: [...this.state.populationGrowth, data[\"total_population\"][1].population - data[\"total_population\"][0].population]\n// })\n\n// Object.keys(countryData), countryData[country]['total_population'][1].population -\n//    countryData[country]['total_population'][0].population\n\n// console.log(Object.keys(object1));  //to get the keys\n// Object.keys(obj).length !== 0  //if not empty\n\n// Object.keys(myObj).forEach(key => {\n//     console.log(key);          // the name of the current key.\n//     console.log(myObj[key]);   // the value of the current key.\n// });\n\n// handleChange = (selectedOption) => {\n//   this.setState({\n//     selectedCountry: selectedOption\n//   }, () => this.getCountryOptions() )\n//   //() => console.log(this.state.selectedCountry))\n// }\n\n//MAKE THIS STRUCTURE:\n// const options = [\n//   { value: 'chocolate', label: 'Chocolate' },\n//   { value: 'strawberry', label: 'Strawberry' },\n//   { value: 'vanilla', label: 'Vanilla' }\n// ];\n\n// getCountryOptions = () => {\n//   if (this.state.countryDataNames.length > 0){    // {Algeria: 1790, ...}\n//     let countries = []\n//     Object.entries(this.state.countryDataNames).forEach(([key, val]) => {\n//       countries = [countries, key]\n//     })\n//     console.log(countries)\n//     return countries\n//   }else {\n//     console.log(\"this.state.countryDataNames.length < 0\")\n//   }\n// }\n","import React from 'react';\n\nconst Navbar = () => {\n  const styles = {\n    nav: {\n      background: '#000',\n      color: '#d6d0b1',\n      height: '230px',\n      margin: '0 auto 100px 0',\n    },\n    title: {\n      fontSize: '6em',\n      padding: '40px 40px 40px 0px',\n      // paddingBottom: '40px',\n      // paddingTop: 0,\n      textAlign: 'left',\n      marginTop: '-10px',\n      // border: 'solid 1px #000',\n      // border: 'solid 3px #fff',\n      position: 'absolute',\n    },\n    subtitle: {\n      fontSize: '1em',\n      textAlign: 'left',\n      paddingLeft: '200px',\n    },\n    img: {\n      height: 'auto',\n      width: '250px',\n      marginTop: '20px',\n    },\n    w: {\n      fontSize: '1.4em',\n    }\n  }\n\n  return (\n    <div style={styles.nav}>\n      <span>\n        <img src='https://d2t1xqejof9utc.cloudfront.net/screenshots/pics/d8f2a26e920f903d68359038bd4cf588/large.gif' style={styles.img} alt=\"\"/>\n      </span>\n\n      <span style={styles.title} className=\"title\">\n        <span style={styles.w}>W</span>rld\n      </span>\n      <div style={styles.subtitle} className=\"subtitle\">\n        Data is the first step to sustainable world\n      </div>\n\n    </div>\n  )\n}\n\nexport default Navbar\n\n// <img src='http://www.lunawebs.com/clients/teleplan/globes/golden_globe_spinning_lg_nwm.gif' style={styles.img}/>\n\n//  http://www.lunawebs.com/clients/teleplan/globes/golden_globe_spinning_lg_nwm.gif\n\n//    https://d2t1xqejof9utc.cloudfront.net/screenshots/pics/d8f2a26e920f903d68359038bd4cf588/large.gif\n//    https://i.gifer.com/AYvD.gif\n\n// <span style={styles.subtitle}>Data is the first step to sustainable world</span>\n","import React, { Component } from \"react\";\nimport PopGrowthData from \"./components/PopGrowthData\";\nimport Navbar from \"./components/Navbar\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <PopGrowthData />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport \"./index.css\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/\"\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();\n"],"sourceRoot":""}